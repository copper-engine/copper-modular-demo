buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}
plugins {
    id 'idea'
    id 'eclipse'
    id 'application'
    id 'java-library'
    id "com.github.hierynomus.license" version "0.12.1"
    id "org.beryx.jlink" version "2.1.6"
    id "org.javamodularity.moduleplugin" version "1.1.1"
}

repositories {
    mavenCentral()
}

ext {
    copperVersion = '5.0.1'
    moduleName = 'org.copperengine.demo.jpms'
    mainClass = 'org.copperengine.demo.jpms.TeamCreationMain'
    launcherName = 'copper-modular-demo'
    imageDirPath = "$buildDir/${launcherName}-image"
    imageZipPath = "$buildDir/image-zip/${launcherName}-image.zip"
}

sourceCompatibility = 11
targetCompatibility = 11

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

sourceSets {
    workflow {
        ext.srcDir = "$projectDir/src/workflow/java"
    }
}
sourceSets.main.java.srcDirs += sourceSets.workflow.srcDir

license {
    header rootProject.file("license-header.txt")
    skipExistingHeaders true
    ignoreFailures false
    excludes (['**/*.properties'])
}

dependencies {
    compile "org.ow2.asm:asm:6.2"
    compile "org.ow2.asm:asm-commons:6.2"
    compile "org.ow2.asm:asm-tree:6.2"
    compile "org.ow2.asm:asm-util:6.2"
    compile "org.ow2.asm:asm-analysis:6.2"

    compile "org.copper-engine:copper-coreengine:$copperVersion"
    compile "org.copper-engine:copper-jmx-interface:$copperVersion"

    compile 'org.asynchttpclient:async-http-client:2.4.5'
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.5'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.5'

    compile 'org.aeonbits.owner:owner:1.0.10'
    compile 'org.slf4j:slf4j-api:1.8.0-beta2'
    compile('ch.qos.logback:logback-classic:1.3.0-alpha4') {
        exclude module: "activation"
    }
    compile 'com.sun.activation:javax.activation:1.2.0'
    runtime 'org.eclipse.jdt:ecj:3.13.102'
}

mainClassName = "$moduleName/$mainClass"
jar {
    manifest {
        attributes 'Implementation-Title': "copper-demo-jpms",
                'Main-Class': mainClass
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: classes) {
    classifier "javadoc"
    from javadoc
}

artifacts {
    archives(sourcesJar, javadocJar)
}

tasks.withType(Javadoc) {
    options.addBooleanOption 'html5', true
}


jlink {
    imageDir = file(imageDirPath)
    imageZip = file(imageZipPath)
    mergedModule {
        requires 'org.slf4j'
        requires 'java.compiler'
        requires 'java.naming'
        requires 'java.sql'
        requires 'java.xml'
        requires 'java.desktop'
        requires 'java.management'
        requires 'jdk.management.agent'
        requires 'jdk.unsupported'
        uses 'javax.annotation.processing.Processor'
        provides 'javax.tools.JavaCompiler' with 'org.eclipse.jdt.internal.compiler.tool.EclipseCompiler'
        provides 'com.fasterxml.jackson.core.JsonFactory' with 'com.fasterxml.jackson.core.JsonFactory'
        provides 'com.fasterxml.jackson.core.ObjectCodec' with 'com.fasterxml.jackson.databind.ObjectMapper'
    }
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
      name = project.launcherName
      jvmArgs = [
        '-Dio.netty.tryReflectionSetAccessible=false',
        '-Dlogback.configurationFile=./logback.xml',
        '-Djava.util.logging.config.file=logging.properties',
        '-Dfile.encoding=UTF-8',
        '-Dcom.sun.management.jmxremote=true',
        '-Dcom.sun.management.jmxremote.authenticate=false',
        '-Dcom.sun.management.jmxremote.port=1099',
        '-Dcom.sun.management.jmxremote.ssl=false'
      ]
      windowsScriptTemplate = file('windowsScriptTemplate.txt')
    }

}

tasks.jlink {
    doLast {
        copy {
            from('src/workflow')
            into("$imageDirPath/bin/src/workflow")
        }
        copy {
            from('src/main/resources')
            into("$imageDirPath/bin")
        }
    }
}
